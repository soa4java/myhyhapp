com.gezitech.adapter.MoreOptionAdapter:
    49:51:public void addList(java.util.ArrayList)
    53:55:public void clear()
com.gezitech.adapter.MoreOptionAdapter$Viewholder:
    public android.widget.CheckBox mCheckBox
com.gezitech.adapter.OptionAdapter:
    59:61:public void addList(java.util.ArrayList)
    63:65:public void clear()
com.gezitech.adapter.PhotoAlbumAdapter:
    private com.gezitech.widget.RemoteImageView imgFrontCover
    157:163:public void addItem(com.gezitech.contract.GezitechEntity_I,boolean)
    165:167:public void addItem(com.gezitech.contract.GezitechEntity_I,int)
    169:169:public java.util.ArrayList getList()
    172:172:public com.gezitech.contract.GezitechEntity_I getItemList(int)
    179:183:public void setItem(com.gezitech.contract.GezitechEntity_I,int)
com.gezitech.adapter.PhotoSelectAdaper:
    108:114:public void addItem(com.gezitech.contract.GezitechEntity_I,boolean)
    116:118:public void addItem(com.gezitech.contract.GezitechEntity_I,int)
    120:120:public java.util.ArrayList getList()
    123:123:public com.gezitech.contract.GezitechEntity_I getItemList(int)
com.gezitech.config.Conf:
    public static final java.lang.String APIKEY
    public static final java.lang.String SINA_APP_KEY
    public static final java.lang.String PERSON_STORAGE_DIR_NAME
    public static final java.lang.String PERSON_STORAGE_FILE_NAME
    public static final java.lang.String LOCAL_FILE_NAME
    public static final java.lang.String FILE1
    public static final java.lang.String FILE2
    public static final java.lang.String FILE3
    public static final java.lang.String APP_STORAGE_FILE_NAME
    public static final java.lang.String eventId
    public static final java.lang.String reportId
    public static final java.lang.String host
    public static final java.lang.String domian
    public static final int port
    public static java.lang.String username
    public static java.lang.String password
    10:10:public Conf()
com.gezitech.config.Configuration:
    6:6:public Configuration()
    88:88:public static java.lang.String getStorePath()
    92:92:public static java.lang.String getCilentVersion()
    96:96:public static java.lang.String getCilentVersion(java.lang.String)
    100:100:public static java.lang.String getSource()
    104:104:public static java.lang.String getSource(java.lang.String)
    112:112:public static java.lang.String getProxyHost(java.lang.String)
    120:120:public static java.lang.String getProxyUser(java.lang.String)
    124:124:public static java.lang.String getClientURL()
    128:128:public static java.lang.String getClientURL(java.lang.String)
    136:136:public static java.lang.String getProxyPassword(java.lang.String)
    144:144:public static int getProxyPort(int)
    152:152:public static int getConnectionTimeout(int)
    161:161:public static int getReadTimeout(int)
    165:165:public static int getRetryCount()
    169:169:public static int getRetryCount(int)
    173:173:public static int getRetryIntervalSecs()
    177:177:public static int getRetryIntervalSecs(int)
    182:182:public static java.lang.String getUser()
    186:186:public static java.lang.String getUser(java.lang.String)
    190:190:public static java.lang.String getPassword()
    194:194:public static java.lang.String getPassword(java.lang.String)
    198:198:public static java.lang.String getUserAgent()
    206:206:public static java.lang.String getOAuthConsumerKey()
    210:210:public static java.lang.String getOAuthConsumerKey(java.lang.String)
    214:214:public static java.lang.String getOAuthConsumerSecret()
    218:218:public static java.lang.String getOAuthConsumerSecret(java.lang.String)
    236:240:public static int getIntProperty(java.lang.String,int)
    245:249:public static long getLongProperty(java.lang.String)
    304:304:public static int getNumberOfAsyncThreads()
    313:313:public static java.lang.String getUploadPath()
com.gezitech.contract.GezitechManager_I:
    public abstract java.lang.String insert(com.gezitech.basic.GezitechEntity,com.gezitech.contract.GezitechManager_I$OnAsynInsertListener)
    public abstract java.lang.String update(com.gezitech.basic.GezitechEntity,com.gezitech.contract.GezitechManager_I$OnAsynUpdateListener)
    public abstract java.lang.String delete(java.lang.String,com.gezitech.contract.GezitechManager_I$OnAsynDeleteListener)
    public abstract com.gezitech.basic.GezitechEntity getOne(java.lang.String,com.gezitech.contract.GezitechManager_I$OnAsynGetOneListener)
    public abstract boolean existsLocal(java.lang.String)
    public abstract int getItemCountLocal()
    public abstract int getMaxIdLocal()
com.gezitech.contract.GezitechManager_I$OnAsynDeleteListener
com.gezitech.http.FileType
com.gezitech.http.HTMLEntity
com.gezitech.http.HttpClient:
    private static final long serialVersionUID
    70:70:public int getConnectionTimeout()
    74:77:public void setConnectionTimeout(int)
    80:80:public int getReadTimeout()
    84:85:public void setReadTimeout(int)
    92:92:public java.lang.String getUserAgent()
    97:97:public com.gezitech.http.Response delete(java.lang.String,boolean)
    102:158:public com.gezitech.http.Response multPartURL(java.lang.String,com.gezitech.http.PostParameter[],com.gezitech.http.ImageItem,boolean)
    170:235:public com.gezitech.http.Response multPartURL(java.lang.String,java.lang.String,com.gezitech.http.PostParameter[],java.io.File,boolean)
    268:268:public com.gezitech.http.Response post(java.lang.String,com.gezitech.http.PostParameter[],boolean)
    368:380:public static java.lang.String encodeUrlParameters(com.gezitech.http.PostParameter[])
    420:420:public java.lang.String getRequestHeader(java.lang.String)
com.gezitech.http.HttpClient$ByteArrayPart
com.gezitech.http.HttpUtil:
    16:16:public HttpUtil()
    34:54:public static void get(java.lang.String,boolean,com.loopj.android.http.AsyncHttpResponseHandler)
    79:98:public static void get(java.lang.String,boolean,com.loopj.android.http.JsonHttpResponseHandler)
    104:115:public static void get(java.lang.String,boolean,com.loopj.android.http.RequestParams,com.loopj.android.http.JsonHttpResponseHandler)
    119:120:public static void get(java.lang.String,com.loopj.android.http.BinaryHttpResponseHandler)
    124:125:public static void getFullUrl(java.lang.String,com.loopj.android.http.BinaryHttpResponseHandler)
    136:155:public static void post(java.lang.String,boolean,com.loopj.android.http.AsyncHttpResponseHandler)
    195:195:public static com.loopj.android.http.AsyncHttpClient getClient()
com.gezitech.http.ImageItem
com.gezitech.http.OAuth:
    private static final long serialVersionUID
    21:21:public OAuth()
com.gezitech.http.OAuth2
com.gezitech.http.OAuth2HttpClient
com.gezitech.http.OAuth2HttpClient$1
com.gezitech.http.OAuth2HttpClient$ByteArrayPart
com.gezitech.http.PostParameter:
    private static final long serialVersionUID
    private static final java.lang.String JPEG
    private static final java.lang.String GIF
    private static final java.lang.String PNG
    private static final java.lang.String OCTET
    30:33:public PostParameter(java.lang.String,double)
    35:38:public PostParameter(java.lang.String,int)
    40:43:public PostParameter(java.lang.String,long)
    45:48:public PostParameter(java.lang.String,java.lang.Long)
    50:53:public PostParameter(java.lang.String,java.io.File)
    55:58:public PostParameter(java.lang.String,byte[])
    60:63:public PostParameter(java.lang.String,android.graphics.Bitmap)
    66:66:public java.lang.String getName()
    70:70:public java.lang.String getValue()
    74:74:public java.io.File getFile()
    78:78:public boolean isFile()
    82:82:public boolean isFileByte()
    86:86:public boolean isBitmap()
    99:131:public java.lang.String getContentType()
    135:145:public static boolean containsFile(com.gezitech.http.PostParameter[])
    149:156:static boolean containsFile(java.util.List)
    160:160:public static com.gezitech.http.PostParameter[] getParameterArray(java.lang.String,java.lang.String)
    164:164:public static com.gezitech.http.PostParameter[] getParameterArray(java.lang.String,int)
    169:169:public static com.gezitech.http.PostParameter[] getParameterArray(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
    175:175:public static com.gezitech.http.PostParameter[] getParameterArray(java.lang.String,int,java.lang.String,int)
    223:242:public static java.lang.String encodeParameters(com.gezitech.http.PostParameter[])
com.gezitech.http.PostParameter$PostParameterList
com.gezitech.http.Response:
    74:77:public java.lang.String getResponseHeader(java.lang.String)
    129:141:public org.w3c.dom.Document asDocument()
    176:185:public org.json.JSONArray asJSONArray()
    192:194:public java.io.InputStreamReader asReader()
    209:216:public static java.lang.String unescape(java.lang.String)
    236:239:private void log(java.lang.String,java.lang.String)
    242:242:public java.lang.String getResponseAsString()
    246:247:public void setResponseAsString(java.lang.String)
    250:251:public void setStatusCode(int)
com.gezitech.image.ImageDetailActivity:
    private static final java.lang.String IMAGE_CACHE_DIR
    public static final java.lang.String EXTRA_IMAGE
    private static final java.lang.String TAG
    170:229:protected void downloadImg()
    231:237:private static void scanPhoto(android.content.Context,java.lang.String)
    243:261:private java.lang.String getFilePathByContentResolver(android.content.Context,android.net.Uri)
    82:82:static synthetic com.gezitech.image.ImageDetailActivity access$2(com.gezitech.image.ImageDetailActivity)
    230:230:static synthetic void access$3(android.content.Context,java.lang.String)
com.gezitech.image.ImageDetailActivity$2
com.gezitech.image.ImageDetailFragment:
    private static final java.lang.String IMAGE_DATA_EXTRA
com.gezitech.photo.PhotoAlbumActivity:
    private android.widget.ImageButton bt_reveal
    private android.widget.ImageButton ib_back
    private android.widget.TextView tv_head_center_title
com.gezitech.rpc.OAuth2Request
com.gezitech.rpc.OAuth2Response
com.gezitech.service.BackgroundService:
    34:34:private void _init()
    42:45:public void addStorageData(java.lang.String,java.lang.Object)
com.gezitech.service.BackgroundService$LocalBinder:
    62:62:com.gezitech.service.BackgroundService getService()
com.gezitech.service.GezitechService:
    public static final int MAX_CONNECTIONS
    100:103:public void push(java.lang.Runnable)
    106:113:private void startNextThread()
    121:123:public void didComplete(java.lang.Runnable)
    140:145:public android.app.Activity getActivityByName(java.lang.String)
    171:187:public void clearCache()
com.gezitech.service.lbs.AppUtils:
    11:11:public AppUtils()
com.gezitech.service.lbs.GpsLocation
com.gezitech.service.lbs.GpsLocation$1
com.gezitech.service.lbs.GpsLocation$2
com.gezitech.service.lbs.Location_I
com.gezitech.service.lbs.Location_I$ItudeCallBack
com.gezitech.service.lbs.NotificationUtil:
    29:29:public NotificationUtil()
com.gezitech.service.lbs.SItude
com.gezitech.service.lbs.StationLocation
com.gezitech.service.lbs.StationLocation$1
com.gezitech.service.lbs.StationLocation$CellIDInfo
com.gezitech.service.lbs.StationLocation$SCell
com.gezitech.service.managers.AccountManager:
    382:447:public void incomelist(int,int,com.gezitech.contract.GezitechManager_I$OnAsynGetListListener)
    452:453:public void buylist(int,int,com.gezitech.contract.GezitechManager_I$OnAsynGetListListener)
com.gezitech.service.managers.AccountManager$6
com.gezitech.service.managers.AsynTaskOAuth2Manager
com.gezitech.service.managers.AsynTaskOAuth2Manager$AsynTask
com.gezitech.service.managers.AsynTaskOAuth2Manager$AsynTask$1
com.gezitech.service.managers.AsynTaskOAuth2Manager$Method
com.gezitech.service.managers.AsynTaskOAuth2Manager$OnAsynCallBackListener
com.gezitech.service.managers.ChatManager:
    319:320:public void deleteFriend()
    346:347:public void deleteChatContent()
com.gezitech.service.managers.DataManager:
    8:8:public DataManager()
com.gezitech.service.managers.DataManager$OrderList:
    42:47:public varargs DataManager$OrderList(java.lang.Class,com.gezitech.service.managers.DataManager$OrderItem[])
    49:51:public com.gezitech.service.managers.DataManager$OrderList add(java.lang.String,boolean)
com.gezitech.service.managers.DataManager$PersonalField:
    85:93:public static com.gezitech.service.managers.DataManager$PersonalField create(java.lang.String,java.lang.Class)
com.gezitech.service.managers.FriendManager:
    1189:1248:public void getchatrecord(int,int,java.lang.String,long,com.gezitech.contract.GezitechManager_I$OnAsynGetListListener)
com.gezitech.service.managers.FriendManager$17
com.gezitech.service.managers.UserManager:
    669:728:public void accountlist(com.gezitech.contract.GezitechManager_I$OnAsynGetOneListener)
com.gezitech.service.managers.UserManager$10
com.gezitech.service.sqlitedb.GezitechDBHelper:
    private static final int DB_VERSION
    120:128:public int dropTable(java.lang.Class)
    424:424:public varargs boolean save(com.gezitech.basic.GezitechEntity,boolean,com.gezitech.service.managers.DataManager$PersonalField[])
    497:512:public int updateAll(java.util.HashMap,java.lang.String)
    536:544:public java.util.ArrayList getIds(java.lang.String,java.lang.String)
com.gezitech.service.util.SAXParserContentHandler
com.gezitech.ui.CommonDialog:
    public static final java.lang.String CONFIGKEY
    public static final java.lang.String DIALOG_INFO_KEY
com.gezitech.ui.CommonDialog$DialogInfo:
    99:100:public void setOnCreate(com.gezitech.ui.CommonDialog$onCreateContent)
    102:103:public void setOnButtonClick(com.gezitech.ui.CommonDialog$onButtonClick)
com.gezitech.util.AttachCallListener
com.gezitech.util.CalendarUtil:
    7:7:public CalendarUtil()
com.gezitech.util.ChangeCaseUtil
com.gezitech.util.DateUtil:
    5:5:public DateUtil()
    45:50:public static void main(java.lang.String[])
com.gezitech.util.DateUtils:
    public static final int LONG_DATE
    public static final int SHORT_DATE
    public static final int SHORT_TIME
    public static final int SHORT_DATE_TIME
    public static final int TYPE_HTML_SPACE
    public static final int TYPE_DECREASE_SYMBOL
    public static final int TYPE_SPACE
    public static final int TYPE_NULL
    67:68:private DateUtils()
    77:100:public static void main(java.lang.String[])
    113:144:public static java.util.Date parse(java.lang.String)
    160:160:public static java.lang.String format(java.util.Date,int)
    176:176:public static java.lang.String format(java.util.Date)
    193:201:public static java.lang.String format(java.util.Date,int,int)
    216:252:public static java.lang.String format(java.util.Date,java.lang.String,int)
    264:264:public static java.lang.String chineseFormat(java.util.Date)
    275:330:public static java.lang.String chineseFormat(java.util.Date,int)
    334:338:public static java.lang.String getCurrentDateString(java.lang.String)
    350:354:public static java.lang.String getDateString(java.util.Date,java.lang.String)
    371:374:public static java.util.Date getDate(java.lang.String,java.lang.String)
    387:387:public static java.util.Date addDays(java.lang.String,java.lang.String,int)
    399:403:public static java.util.Date addDays(java.util.Date,int)
    407:411:public static java.util.Date addWeeks(java.util.Date,int)
    415:419:public static java.util.Date addMonths(java.util.Date,int)
    430:434:public static java.util.Date addHours(java.util.Date,int)
    446:446:public static java.util.Date addHours(java.lang.String,java.lang.String,int)
    461:461:public static java.lang.String addHours(java.lang.String,java.lang.String,int,java.lang.String)
    474:474:public static boolean isDateBetween(java.util.Date,java.util.Date,java.util.Date)
    479:479:public static java.lang.String getCurrentTime()
    483:483:public static java.lang.String getCurrentDate()
    487:503:public static java.lang.String formatDate(java.util.Date)
    509:526:public static int getDateDiff(java.util.Date,java.util.Date,int)
    543:554:public static java.lang.String getTimeStr(long)
com.gezitech.util.DimensionUtility:
    18:18:public DimensionUtility()
    37:38:public static int px2dip(android.content.Context,float)
com.gezitech.util.EnvUtil
com.gezitech.util.IOUtil:
    32:32:public IOUtil()
    49:86:public static java.io.File makeFile(java.io.FileInputStream,java.lang.String)
    90:127:public static java.io.File makeFile(java.io.FileInputStream,java.lang.String,java.lang.String)
    158:171:public static byte[] getBytesFromInputStream(java.io.InputStream,int)
    181:192:public static byte[] getFileBytes(java.io.File)
    291:307:public static android.graphics.Bitmap getLocalImage(java.lang.String,int,int)
    325:326:public static byte[] getLocalImageBytes(java.lang.String)
    329:341:public static byte[] toByteArray(java.io.InputStream)
    469:472:public static java.lang.String getCacheFilePath(boolean)
    530:549:public static synchronized void writeFile(java.io.InputStream,java.lang.String,java.lang.String)
    572:577:public static boolean deletePath(java.lang.String)
com.gezitech.util.ImageAnimation
com.gezitech.util.ImageDownloader:
    private static final java.lang.String LOG_TAG
    private static final int HARD_CACHE_CAPACITY
    private static final int DELAY_BEFORE_PURGE
    71:72:public void setDefaultDrawable(android.graphics.drawable.Drawable)
    88:90:public ImageDownloader(android.graphics.drawable.Drawable,java.lang.String)
com.gezitech.util.ImageDownloader$DownloadedBitmap
com.gezitech.util.ImageDownloader$DownloadedDrawable:
    346:348:public ImageDownloader$DownloadedDrawable(com.gezitech.util.ImageDownloader$BitmapDownloaderTask)
com.gezitech.util.ImageLauncher
com.gezitech.util.ImageUtil:
    28:28:public ImageUtil()
    49:82:public static boolean bitmapToFile(java.lang.String,java.io.File,int,int)
    124:141:public static android.graphics.Bitmap toRoundCorner(android.graphics.Bitmap,int)
    146:174:public static android.graphics.Bitmap createReflectionImageWithOrigin(android.graphics.Bitmap)
    179:187:public static android.graphics.Bitmap drawableToBitmap(android.graphics.drawable.Drawable)
    191:227:public static android.graphics.Bitmap rotateBitmap(java.lang.String)
    237:245:public static android.graphics.Bitmap getSmallBitmap(java.lang.String)
    253:263:public static android.graphics.Bitmap resizeBitmap(android.graphics.Bitmap,int)
    274:283:public static int calculateInSampleSize(android.graphics.BitmapFactory$Options,int,int)
    288:298:public java.lang.String getPath(android.net.Uri,android.app.Activity)
com.gezitech.util.LocationUtil
com.gezitech.util.LocationUtil$1
com.gezitech.util.LocationUtil$2
com.gezitech.util.NetUtil:
    36:36:public NetUtil()
    44:58:public static boolean isNetworkAvailable(android.content.Context)
    99:103:public static boolean isWifiEnabled(android.content.Context)
    116:123:public static boolean isWifi(android.content.Context)
    133:140:public static boolean is3G(android.content.Context)
    147:157:public static android.graphics.drawable.BitmapDrawable getImageFromUrl(java.net.URL)
    172:190:public static java.lang.String getContent(java.lang.String)
    195:195:public static java.lang.String formatDate(java.lang.Long,java.lang.String)
    200:202:public static java.lang.String formatDate(java.util.Date,java.lang.String)
    206:218:public static java.util.Date formatDate(java.lang.String,java.lang.String)
    222:222:public static java.lang.String getTimeDiff(java.util.Date,java.lang.String)
    227:227:public static java.lang.String getTimeDiff(java.util.Date)
    269:270:public static int dip2px(android.content.Context,float)
    277:278:public static int px2dip(android.content.Context,float)
com.gezitech.util.PagingUtil
com.gezitech.util.ReflectUtil
com.gezitech.util.ScrollListUtil
com.gezitech.util.SoundMeter:
    private static final double EMA_FILTER
    64:67:public void pause()
    70:73:public void start()
    84:86:public double getAmplitudeEMA()
com.gezitech.util.StackUtil
com.gezitech.util.StackUtil$OnCallBackAction
com.gezitech.util.StringUtil:
    private static final java.lang.String PASSWORD_CRYPT_KEY
    private static final java.lang.String DES
    30:30:public StringUtil()
    58:71:public static byte[] encrypt(byte[],byte[])
    86:99:public static byte[] decrypt(byte[],byte[])
    111:115:public static final java.lang.String decrypt(java.lang.String)
    127:130:public static final java.lang.String encrypt(java.lang.String)
    135:144:public static java.lang.String byte2hex(byte[])
    148:155:public static byte[] hex2byte(byte[])
    160:173:public static android.text.SpannableString formatWeiboContent(java.lang.String)
    186:193:public static boolean isPhone(java.lang.String)
    257:271:public static java.lang.String splitAndFilterString(java.lang.String,int)
    280:291:public static java.lang.String[] extractPhoneNo(java.lang.String)
    304:309:public static boolean contains(java.lang.String[],java.lang.String)
    338:345:public static boolean isEmail(java.lang.String)
    353:354:public static boolean isNumeric(java.lang.String)
    362:387:public static java.lang.String getUrlFileName(java.lang.String)
    433:440:public static java.lang.String stringEncode(java.lang.String)
com.gezitech.util.TabBitmap
com.gezitech.util.ThreadUtil:
    5:5:public ThreadUtil()
com.gezitech.util.ToastMakeText:
    79:80:public void Toast(int)
    82:83:public void Toast(int,int)
com.gezitech.util.UUIDUtil
com.gezitech.util.Utils
com.gezitech.widget.AutoGallery
com.gezitech.widget.GridViewNoScroll
com.gezitech.widget.LoadingCircleView:
    61:67:public void setProgress(int,int)
com.gezitech.widget.MoreOptionDialog:
    private android.app.Dialog dialog
    56:58:protected MoreOptionDialog(android.content.Context,boolean,android.content.DialogInterface$OnCancelListener)
    69:70:public MoreOptionDialog(android.content.Context)
com.gezitech.widget.MyAlertDialog
com.gezitech.widget.MyListView:
    private static final java.lang.String TAG
    private static final int RELEASE_To_REFRESH
    private static final int PULL_To_REFRESH
    private static final int REFRESHING
    private static final int DONE
    private static final int LOADING
    private static final int RATIO
    private android.widget.LinearLayout load_more_ing
com.gezitech.widget.OptionDialog:
    private android.app.Dialog dialog
    65:67:protected OptionDialog(android.content.Context,boolean,android.content.DialogInterface$OnCancelListener)
    78:79:public OptionDialog(android.content.Context)
com.gezitech.widget.RoundGroupItem
com.gezitech.widget.RoundGroupItem$1
com.gezitech.widget.RoundGroupItem$ItemType
com.gezitech.widget.SelectPicPopupWindow:
    private android.widget.LinearLayout layout
    private android.widget.LinearLayout pop_layout
com.gezitech.widget.listgroup.BladeView
com.gezitech.widget.listgroup.BladeView$1
com.gezitech.widget.listgroup.BladeView$OnItemClickListener
com.gezitech.widget.listgroup.PinnedHeaderListView:
    private static final int MAX_ALPHA
com.gezitech.widget.listgroup.PinnedHeaderListView$PinnedHeaderAdapter:
    public static final int PINNED_HEADER_GONE
    public static final int PINNED_HEADER_VISIBLE
    public static final int PINNED_HEADER_PUSHED_UP
com.hyh.www.BuildConfig
com.hyh.www.ForgetActivity:
    private android.widget.Button registered_account
com.hyh.www.LoginActivity:
    private static final int MSG_USERID_FOUND
    private static final int MSG_LOGIN
    private static final int MSG_AUTH_CANCEL
    private static final int MSG_AUTH_ERROR
    private static final int MSG_AUTH_COMPLETE
com.hyh.www.R:
    10:10:public R()
com.hyh.www.ServiceActivity:
    private android.widget.Button registered
    private android.widget.Button registered_account
    private com.gezitech.widget.ExtendViewFlipper pager_slide
    private android.widget.LinearLayout pager_control
    private com.gezitech.entity.PageList advList
    private android.widget.ImageView[] contorls
    private android.view.animation.Animation in
    private android.view.animation.Animation out
    private android.widget.Button bt_send_verification_code
    private android.widget.EditText ed_verification_code
    private android.widget.EditText ed_phonenumber
    private android.widget.EditText ed_enter_password
    private android.widget.EditText ed_input_again
com.hyh.www.WelcomeActivity:
    146:150:public void setStartState(int)
    160:161:public int getStartState()
    165:190:public static java.lang.String getDeviceInfo(android.content.Context)
com.hyh.www.ZhuyeActivity:
    408:424:private void exitBy2Click()
    406:406:static synthetic void access$2(java.lang.Boolean)
com.hyh.www.ZhuyeActivity$3
com.hyh.www.adapter.AdvGalleryAdaper
com.hyh.www.adapter.BasicAdapter:
    48:50:public void addItem(com.gezitech.contract.GezitechEntity_I,int)
com.hyh.www.adapter.MyPostAdapter:
    72:73:public void setCannelTimer()
com.hyh.www.chat.AddTemplateActivity:
    private java.lang.String title
com.hyh.www.chat.BillDetailActivity_bak:
    private android.widget.ImageView play_del_xx
    private android.widget.Button bt_editbill_send
    private android.widget.ImageButton iv_camera
com.hyh.www.chat.ChatActivity:
    private com.gezitech.service.sqlitedb.GezitechDBHelper friendDB
    private static final int UPDATE_CHAT_CONTENT
com.hyh.www.chat.ChatUtils:
    3:3:public ChatUtils()
com.hyh.www.chat.OrderDetailActivity:
    private android.widget.ImageView play_del_xx
    private android.widget.Button bt_editbill_send
    private android.widget.ImageButton iv_camera
    private android.widget.ImageView iv_editbill_pay
    private android.widget.TextView tv_editbill_pay
    private int type
com.hyh.www.home.MyReleaseActivity:
    private android.widget.TextView tv_title
com.hyh.www.home.ReleaseHyhActivity:
    private android.widget.RadioGroup rg_pubway_box
    private android.widget.TextView ed_guojia
com.hyh.www.nearby.CommentBoxDialog:
    90:92:protected CommentBoxDialog(android.content.Context,boolean,android.content.DialogInterface$OnCancelListener)
    101:103:public CommentBoxDialog(android.content.Context)
com.hyh.www.nearby.NearUtils:
    14:14:public NearUtils()
com.hyh.www.pay.Base64
com.hyh.www.pay.BaseHelper:
    public static final java.lang.String PARAM_EQUAL
    public static final java.lang.String PARAM_AND
    37:37:public BaseHelper()
    49:71:public static java.lang.String convertStreamToString(java.io.InputStream)
    126:133:public static void chmod(java.lang.String,java.lang.String)
    156:163:public static android.app.ProgressDialog showProgress(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean,boolean)
    175:192:public static org.json.JSONObject string2JSON(java.lang.String,java.lang.String)
    209:221:public static java.lang.String toJSONString(java.lang.Object)
    232:296:public static java.util.List bean2Parameters(java.lang.Object)
    307:308:public static java.lang.String sortParam(java.lang.Object)
    319:356:public static java.lang.String sortParam(java.util.List)
com.hyh.www.pay.BaseHelper$1
com.hyh.www.pay.Constants
com.hyh.www.pay.EnvConstants
com.hyh.www.pay.Md5Algorithm
com.hyh.www.pay.MobileSecurePayer:
    static final java.lang.String TAG
com.hyh.www.pay.NetworkManager
com.hyh.www.pay.NetworkManager$1
com.hyh.www.pay.PayOrder
com.hyh.www.pay.ResultChecker:
    public static final int RESULT_INVALID_PARAM
    public static final int RESULT_CHECK_SIGN_FAILED
    public static final int RESULT_CHECK_SIGN_TYPE_FAILED
    public static final int RESULT_CHECK_SIGN_SUCCEED
    39:77:public int checkSign()
    82:98:private java.lang.String getSignContent(org.json.JSONObject)
com.hyh.www.pay.Rsa
com.hyh.www.pay.YTPayDefine
com.hyh.www.session.ChatMessagesActivity:
    private android.widget.TextView tv_title
com.hyh.www.session.SessionFramgent:
    private android.widget.RadioButton menu_session_hyh
    private android.widget.RadioButton menu_session_privatechat
    private android.widget.RadioButton menu_session_contacts
    private java.util.List mSections
    private java.util.List mPositions
    private android.view.View myshoutView
    private static final int UPDATE_CHAT_CONTENT
com.hyh.www.user.AddActivity:
    private android.widget.TextView tv_title
com.hyh.www.user.BecomeServiceActivity:
    private com.gezitech.widget.RemoteImageView iv_changdizhaopian_one
    private com.gezitech.widget.RemoteImageView iv_changdizhaopian_two
    private com.gezitech.widget.RemoteImageView iv_changdizhaopian_three
    private static final int TIME_DIALOG_START
    private static final int TIME_DIALOG_END
com.hyh.www.user.BecomeShangjiaActivity:
    private com.gezitech.widget.RemoteImageView iv_changdizhaopian_one
    private com.gezitech.widget.RemoteImageView iv_changdizhaopian_two
    private com.gezitech.widget.RemoteImageView iv_changdizhaopian_three
    private static final int TIME_DIALOG_START
    private static final int TIME_DIALOG_END
com.hyh.www.user.ChooseActivity:
    private android.widget.TextView tv_title
com.hyh.www.user.ContactsActivity:
    private android.widget.TextView tv_title
com.hyh.www.user.EditDataActivity:
    private android.widget.TextView tv_title
com.hyh.www.user.FeedbackActivity:
    private android.widget.TextView tv_title
com.hyh.www.user.IncomeActivity:
    private android.widget.LinearLayout ll_head4
com.hyh.www.user.NewMessageActivity:
    private static final int TIME_DIALOG_START
    private static final int TIME_DIALOG_END
com.hyh.www.user.PersonDetailedInformationActivity:
    private android.widget.TextView jiaruheimingdan
com.hyh.www.user.PersonFramgent:
    private android.widget.Button person_sales
    private android.widget.Button person_buy
com.hyh.www.user.SystemMessageActivity:
    private android.widget.TextView tv_title
com.hyh.www.user.SystemMessageDetailActivity:
    private android.widget.TextView tv_content
com.hyh.www.user.SystemSettingActivity:
    private android.widget.TextView tv_title
com.hyh.www.user.TopupActivity:
    private android.widget.TextView tv_title
com.hyh.www.widget.ActivityCommon:
    21:21:public ActivityCommon()
com.hyh.www.widget.ImageShow:
    13:13:public ImageShow()
com.hyh.www.widget.NetworkUtils
com.hyh.www.widget.YMDialog:
    private android.content.Context context
com.hyh.www.widget.YMDialog2:
    private android.content.Context context
    private android.widget.TextView tv_hint_msg
    private android.widget.TextView tv_cancel2
    private android.widget.TextView tv_get_credits2
com.hyh.www.wxapi.WXPayEntryActivity:
    private static final java.lang.String TAG
com.kenai.jbosh.AbstractBody:
    60:61:public final java.util.Set getAttributeNames()
com.kenai.jbosh.AbstractIntegerAttr:
    34:35:protected AbstractIntegerAttr(int)
com.kenai.jbosh.ApacheHTTPResponse:
    private static final java.lang.String ACCEPT_ENCODING
    private static final java.lang.String CHARSET
    private static final java.lang.String CONTENT_TYPE
com.kenai.jbosh.AttrCharsets:
    63:68:boolean isAccepted(java.lang.String)
com.kenai.jbosh.AttrMaxPause:
    61:61:public int getInMilliseconds()
com.kenai.jbosh.AttrVersion:
    124:124:int getMajor()
    133:133:int getMinor()
com.kenai.jbosh.Attributes:
    33:34:private Attributes()
com.kenai.jbosh.BOSHClient:
    private static final java.lang.String TERMINATE
    private static final java.lang.String ERROR
    private static final java.lang.String INTERRUPTED
    private static final java.lang.String UNHANDLED
    private static final java.lang.String NULL_LISTENER
    private static final int DEFAULT_EMPTY_REQUEST_DELAY
    private static final int DEFAULT_PAUSE_MARGIN
    377:377:public com.kenai.jbosh.BOSHClientConfig getBOSHClientConfig()
    400:404:public void removeBOSHClientConnListener(com.kenai.jbosh.BOSHClientConnListener)
    427:431:public void removeBOSHClientRequestListener(com.kenai.jbosh.BOSHClientRequestListener)
    454:458:public void removeBOSHClientResponseListener(com.kenai.jbosh.BOSHClientResponseListener)
    537:559:public boolean pause()
    569:570:public void disconnect()
    611:615:com.kenai.jbosh.CMSessionParams getCMSessionParams()
    623:639:void drain()
    647:648:void setExchangeInterceptor(com.kenai.jbosh.BOSHClient$ExchangeInterceptor)
com.kenai.jbosh.BOSHClientConfig:
    432:432:public javax.net.ssl.SSLContext getSSLContext()
com.kenai.jbosh.BOSHClientConfig$Builder:
    147:155:public static com.kenai.jbosh.BOSHClientConfig$Builder create(com.kenai.jbosh.BOSHClientConfig)
    166:171:public com.kenai.jbosh.BOSHClientConfig$Builder setFrom(java.lang.String)
    182:187:public com.kenai.jbosh.BOSHClientConfig$Builder setXMLLang(java.lang.String)
    208:226:public com.kenai.jbosh.BOSHClientConfig$Builder setRoute(java.lang.String,java.lang.String,int)
    258:263:public com.kenai.jbosh.BOSHClientConfig$Builder setSSLContext(javax.net.ssl.SSLContext)
    275:276:public com.kenai.jbosh.BOSHClientConfig$Builder setCompressionEnabled(boolean)
com.kenai.jbosh.BOSHClientConnEvent:
    private static final long serialVersionUID
    139:139:public com.kenai.jbosh.BOSHClient getBOSHClient()
    186:186:public java.util.List getOutstandingRequests()
com.kenai.jbosh.BOSHException:
    private static final long serialVersionUID
com.kenai.jbosh.BOSHMessageEvent:
    private static final long serialVersionUID
com.kenai.jbosh.BodyParserSAX
com.kenai.jbosh.BodyParserSAX$1
com.kenai.jbosh.BodyParserSAX$Handler
com.kenai.jbosh.BodyQName:
    static final java.lang.String BOSH_NS_URI
com.kenai.jbosh.CMSessionParams:
    134:134:com.kenai.jbosh.AttrWait getWait()
    146:146:com.kenai.jbosh.AttrInactivity getInactivityPeriod()
    154:154:com.kenai.jbosh.AttrHold getHold()
    166:166:com.kenai.jbosh.AttrAck getAck()
    170:170:com.kenai.jbosh.AttrCharsets getCharsets()
com.kenai.jbosh.ComposableBody:
    219:238:static com.kenai.jbosh.ComposableBody fromStaticBody(com.kenai.jbosh.StaticBody)
    293:293:public java.lang.String getPayloadXML()
com.kenai.jbosh.GZIPCodec:
    private static final int BUFFER_SIZE
    41:43:private GZIPCodec()
com.kenai.jbosh.HTTPResponse:
    public abstract void abort()
com.kenai.jbosh.QName:
    92:93:public QName(java.lang.String)
    223:240:public static com.kenai.jbosh.QName valueOf(java.lang.String)
    262:267:private void readObject(java.io.ObjectInputStream)
com.kenai.jbosh.RequestIDSequence:
    private static final int MAX_BITS
    private static final int INCREMENT_BITS
    private static final long MIN_INCREMENTS
    private static final long MAX_INITIAL
    private static final long MASK
com.kenai.jbosh.ServiceLib
com.kenai.jbosh.StaticBody:
    private static final int BUFFER_SIZE
    86:100:public static com.kenai.jbosh.StaticBody fromStream(java.io.InputStream)
com.kenai.jbosh.ZLIBCodec:
    private static final int BUFFER_SIZE
    41:43:private ZLIBCodec()
com.novell.sasl.client.DigestChallenge:
    public static final int QOP_AUTH
    public static final int QOP_AUTH_INT
    public static final int QOP_AUTH_CONF
    public static final int QOP_UNRECOGNIZED
    private static final int CIPHER_3DES
    private static final int CIPHER_DES
    private static final int CIPHER_RC4_40
    private static final int CIPHER_RC4
    private static final int CIPHER_RC4_56
    private static final int CIPHER_UNRECOGNIZED
    private static final int CIPHER_RECOGNIZED_MASK
    358:358:public boolean getStaleFlag()
    366:366:public int getMaxBuf()
    374:374:public java.lang.String getCharacterSet()
    390:390:public int getCipherOptions()
com.novell.sasl.client.DigestMD5SaslClient:
    private static final int STATE_INITIAL
    private static final int STATE_DIGEST_RESPONSE_SENT
    private static final int STATE_VALID_SERVER_RESPONSE
    private static final int STATE_INVALID_SERVER_RESPONSE
    private static final int STATE_DISPOSED
    private static final int NONCE_BYTE_COUNT
    private static final int NONCE_HEX_COUNT
    private static final java.lang.String DIGEST_METHOD
com.novell.sasl.client.DirectiveList:
    private static final int STATE_LOOKING_FOR_FIRST_DIRECTIVE
    private static final int STATE_LOOKING_FOR_DIRECTIVE
    private static final int STATE_SCANNING_NAME
    private static final int STATE_LOOKING_FOR_EQUALS
    private static final int STATE_LOOKING_FOR_VALUE
    private static final int STATE_LOOKING_FOR_COMMA
    private static final int STATE_SCANNING_QUOTED_STRING_VALUE
    private static final int STATE_SCANNING_TOKEN_VALUE
    private static final int STATE_NO_UTF8_SUPPORT
    private java.lang.String m_curName
com.novell.sasl.client.ParsedDirective:
    public static final int QUOTED_STRING_VALUE
    public static final int TOKEN_VALUE
    52:52:int getValueType()
com.novell.sasl.client.TokenParser:
    private static final int STATE_LOOKING_FOR_FIRST_TOKEN
    private static final int STATE_LOOKING_FOR_TOKEN
    private static final int STATE_SCANNING_TOKEN
    private static final int STATE_LOOKING_FOR_COMMA
    private static final int STATE_PARSING_ERROR
    private static final int STATE_DONE
de.measite.smack.Sasl:
    private static final java.lang.String CLIENTFACTORYSRV
    private static final java.lang.String SERVERFACTORYSRV
    public static final java.lang.String POLICY_NOPLAINTEXT
    public static final java.lang.String POLICY_NOACTIVE
    public static final java.lang.String POLICY_NODICTIONARY
    public static final java.lang.String POLICY_NOANONYMOUS
    public static final java.lang.String POLICY_FORWARD_SECRECY
    public static final java.lang.String POLICY_PASS_CREDENTIALS
    public static final java.lang.String MAX_BUFFER
    public static final java.lang.String RAW_SEND_SIZE
    public static final java.lang.String REUSE
    public static final java.lang.String QOP
    public static final java.lang.String STRENGTH
    public static final java.lang.String SERVER_AUTH
    29:29:public Sasl()
    68:68:public static java.util.Enumeration getSaslServerFactories()
    73:73:public static org.apache.harmony.javax.security.sasl.SaslServer createSaslServer(java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler)
org.xbill.DNS.A6Record:
    private static final long serialVersionUID
    39:46:public A6Record(org.xbill.DNS.Name,int,long,int,java.net.InetAddress,org.xbill.DNS.Name)
    64:78:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    99:99:public int getPrefixBits()
    105:105:public java.net.InetAddress getSuffix()
    111:111:public org.xbill.DNS.Name getPrefix()
org.xbill.DNS.AAAARecord:
    private static final long serialVersionUID
    33:37:public AAAARecord(org.xbill.DNS.Name,int,long,java.net.InetAddress)
    46:47:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    58:58:public java.net.InetAddress getAddress()
org.xbill.DNS.AFSDBRecord:
    private static final long serialVersionUID
    31:32:public AFSDBRecord(org.xbill.DNS.Name,int,long,int,org.xbill.DNS.Name)
    37:37:public int getSubtype()
    43:43:public org.xbill.DNS.Name getHost()
org.xbill.DNS.APLRecord:
    private static final long serialVersionUID
    115:131:public APLRecord(org.xbill.DNS.Name,int,long,java.util.List)
    175:231:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    248:248:public java.util.List getElements()
org.xbill.DNS.ARecord:
    private static final long serialVersionUID
    51:55:public ARecord(org.xbill.DNS.Name,int,long,java.net.InetAddress)
    64:66:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    78:80:public java.net.InetAddress getAddress()
org.xbill.DNS.Address:
    public static final int IPv4
    public static final int IPv6
    21:21:private Address()
    27:69:private static byte[] parseV4(java.lang.String)
    74:156:private static byte[] parseV6(java.lang.String)
    167:173:public static int[] toArray(java.lang.String,int)
    183:183:public static int[] toArray(java.lang.String)
    194:199:public static byte[] toByteArray(java.lang.String,int)
    209:210:public static boolean isDottedQuad(java.lang.String)
    231:231:public static java.lang.String toDottedQuad(int[])
    237:243:private static org.xbill.DNS.Record[] lookupHostName(java.lang.String)
    249:250:private static java.net.InetAddress addrFromRecord(java.lang.String,org.xbill.DNS.Record)
    262:265:public static java.net.InetAddress getByName(java.lang.String)
    278:285:public static java.net.InetAddress[] getAllByName(java.lang.String)
    299:305:public static java.net.InetAddress getByAddress(java.lang.String)
    319:325:public static java.net.InetAddress getByAddress(java.lang.String,int)
    336:341:public static java.lang.String getHostName(java.net.InetAddress)
org.xbill.DNS.CERTRecord:
    public static final int PKIX
    public static final int SPKI
    public static final int PGP
    public static final int URI
    public static final int OID
    private static final long serialVersionUID
    131:136:public CERTRecord(org.xbill.DNS.Name,int,long,int,int,int,byte[])
    148:159:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    189:189:public int getCertType()
    197:197:public int getKeyTag()
    205:205:public int getAlgorithm()
    213:213:public byte[] getCert()
org.xbill.DNS.CERTRecord$CertificateType
org.xbill.DNS.CNAMERecord:
    private static final long serialVersionUID
    28:29:public CNAMERecord(org.xbill.DNS.Name,int,long,org.xbill.DNS.Name)
    42:42:public org.xbill.DNS.Name getAlias()
org.xbill.DNS.Cache:
    private static final int defaultMaxEntries
    188:194:public Cache(java.lang.String)
    203:204:private synchronized void removeName(org.xbill.DNS.Name)
    328:342:public synchronized void addRecord(org.xbill.DNS.Record,int,java.lang.Object)
    520:524:private org.xbill.DNS.RRset[] findRecords(org.xbill.DNS.Name,int,int)
    537:537:public org.xbill.DNS.RRset[] findRecords(org.xbill.DNS.Name,int)
    550:550:public org.xbill.DNS.RRset[] findAnyRecords(org.xbill.DNS.Name,int)
    735:736:public void flushSet(org.xbill.DNS.Name,int)
    745:746:public void flushName(org.xbill.DNS.Name)
    755:756:public void setMaxNCache(int)
    764:764:public int getMaxNCache()
    773:774:public void setMaxCache(int)
    782:782:public int getMaxCache()
    791:791:public int getSize()
    801:801:public int getMaxEntries()
    818:819:public void setMaxEntries(int)
    826:826:public int getDClass()
org.xbill.DNS.Cache$CacheMap:
    138:138:int getMaxSize()
    148:149:void setMaxSize(int)
org.xbill.DNS.Cache$CacheRRset:
    private static final long serialVersionUID
    46:50:public Cache$CacheRRset(org.xbill.DNS.Record,int,long)
org.xbill.DNS.Compression:
    private static final int TABLE_SIZE
    private static final int MAX_POINTER
org.xbill.DNS.Credibility
org.xbill.DNS.DClass:
    public static final int IN
    public static final int CH
    public static final int CHAOS
    public static final int HS
    public static final int HESIOD
    public static final int NONE
    public static final int ANY
    61:61:private DClass()
    89:89:public static int value(java.lang.String)
org.xbill.DNS.DHCIDRecord:
    private static final long serialVersionUID
    33:35:public DHCIDRecord(org.xbill.DNS.Name,int,long,byte[])
    44:45:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    62:62:public byte[] getData()
org.xbill.DNS.DLVRecord:
    public static final int SHA1_DIGEST_ID
    public static final int SHA256_DIGEST_ID
    private static final long serialVersionUID
    48:53:public DLVRecord(org.xbill.DNS.Name,int,long,int,int,int,byte[])
    65:69:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    95:95:public int getAlgorithm()
    104:104:public int getDigestID()
    112:112:public byte[] getDigest()
    120:120:public int getFootprint()
org.xbill.DNS.DNAMERecord:
    private static final long serialVersionUID
    28:29:public DNAMERecord(org.xbill.DNS.Name,int,long,org.xbill.DNS.Name)
    42:42:public org.xbill.DNS.Name getAlias()
org.xbill.DNS.DNSKEYRecord:
    private static final long serialVersionUID
    59:60:public DNSKEYRecord(org.xbill.DNS.Name,int,long,int,int,int,byte[])
    75:78:public DNSKEYRecord(org.xbill.DNS.Name,int,long,int,int,int,java.security.PublicKey)
    82:89:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    17:17:public bridge synthetic java.security.PublicKey getPublicKey()
    17:17:public bridge synthetic byte[] getKey()
    17:17:public bridge synthetic int getAlgorithm()
    17:17:public bridge synthetic int getProtocol()
    17:17:public bridge synthetic int getFlags()
org.xbill.DNS.DNSKEYRecord$Flags
org.xbill.DNS.DNSKEYRecord$Protocol
org.xbill.DNS.DNSSEC
org.xbill.DNS.DNSSEC$Algorithm
org.xbill.DNS.DNSSEC$DNSSECException
org.xbill.DNS.DNSSEC$IncompatibleKeyException
org.xbill.DNS.DNSSEC$KeyMismatchException
org.xbill.DNS.DNSSEC$MalformedKeyException
org.xbill.DNS.DNSSEC$SignatureExpiredException
org.xbill.DNS.DNSSEC$SignatureNotYetValidException
org.xbill.DNS.DNSSEC$SignatureVerificationException
org.xbill.DNS.DNSSEC$UnsupportedAlgorithmException
org.xbill.DNS.DSRecord:
    public static final int SHA1_DIGEST_ID
    public static final int SHA256_DIGEST_ID
    private static final long serialVersionUID
    57:62:public DSRecord(org.xbill.DNS.Name,int,long,int,int,int,byte[])
    74:76:public DSRecord(org.xbill.DNS.Name,int,long,int,int,org.xbill.DNS.DNSKEYRecord)
    88:92:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    118:118:public int getAlgorithm()
    127:127:public int getDigestID()
    135:135:public byte[] getDigest()
    143:143:public int getFootprint()
org.xbill.DNS.DSRecord$Digest
org.xbill.DNS.EmptyRecord:
    private static final long serialVersionUID
    31:31:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
org.xbill.DNS.ExtendedFlags
org.xbill.DNS.ExtendedResolver:
    private static final int quantum
    277:284:public ExtendedResolver(java.lang.String[])
    293:297:public ExtendedResolver(org.xbill.DNS.Resolver[])
    301:303:public void setPort(int)
    307:309:public void setTCP(boolean)
    313:315:public void setIgnoreTruncation(boolean)
    319:321:public void setEDNS(int)
    325:328:public void setEDNS(int,int,int,java.util.List)
    332:334:public void setTSIGKey(org.xbill.DNS.TSIG)
    381:383:public org.xbill.DNS.Resolver getResolver(int)
    389:389:public org.xbill.DNS.Resolver[] getResolvers()
    395:396:public void addResolver(org.xbill.DNS.Resolver)
    401:402:public void deleteResolver(org.xbill.DNS.Resolver)
    410:411:public void setLoadBalance(boolean)
    416:417:public void setRetries(int)
org.xbill.DNS.Flags:
    public static final byte QR
    public static final byte AA
    public static final byte TC
    public static final byte RD
    public static final byte RA
    public static final byte AD
    public static final byte CD
    public static final int DO
    55:55:private Flags()
    66:66:public static int value(java.lang.String)
org.xbill.DNS.FormattedTime:
    28:28:private FormattedTime()
    58:76:public static java.util.Date parse(java.lang.String)
org.xbill.DNS.GPOSRecord:
    private static final long serialVersionUID
    50:55:public GPOSRecord(org.xbill.DNS.Name,int,long,double,double,double)
    68:78:public GPOSRecord(org.xbill.DNS.Name,int,long,java.lang.String,java.lang.String,java.lang.String)
    96:109:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    158:158:public java.lang.String getAltitudeString()
    168:168:public double getAltitude()
org.xbill.DNS.Generator
org.xbill.DNS.HINFORecord:
    private static final long serialVersionUID
    34:42:public HINFORecord(org.xbill.DNS.Name,int,long,java.lang.String,java.lang.String)
    53:59:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    66:66:public java.lang.String getCPU()
    74:74:public java.lang.String getOS()
org.xbill.DNS.Header:
    public static final int LENGTH
    67:68:public Header(byte[])
    113:116:public void unsetFlag(int)
    131:135:boolean[] getFlags()
    169:174:public void setRcode(int)
org.xbill.DNS.IPSECKEYRecord:
    private static final long serialVersionUID
    61:96:public IPSECKEYRecord(org.xbill.DNS.Name,int,long,int,int,int,java.lang.Object,byte[])
    125:148:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    182:182:public int getPrecedence()
    188:188:public int getGatewayType()
    194:194:public int getAlgorithmType()
    200:200:public java.lang.Object getGateway()
    206:206:public byte[] getKey()
org.xbill.DNS.IPSECKEYRecord$Algorithm
org.xbill.DNS.IPSECKEYRecord$Gateway
org.xbill.DNS.ISDNRecord:
    private static final long serialVersionUID
    35:44:public ISDNRecord(org.xbill.DNS.Name,int,long,java.lang.String,java.lang.String)
    56:67:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    74:74:public java.lang.String getAddress()
    82:84:public java.lang.String getSubAddress()
org.xbill.DNS.KEYBase:
    private static final long serialVersionUID
    32:37:public KEYBase(org.xbill.DNS.Name,int,int,long,int,int,int,byte[])
    76:76:public int getFlags()
    84:84:public int getProtocol()
    92:92:public int getAlgorithm()
    100:100:public byte[] getKey()
    145:149:public java.security.PublicKey getPublicKey()
org.xbill.DNS.KEYRecord:
    private static final long serialVersionUID
    public static final int FLAG_NOCONF
    public static final int FLAG_NOAUTH
    public static final int FLAG_NOKEY
    public static final int OWNER_ZONE
    public static final int OWNER_HOST
    public static final int OWNER_USER
    public static final int PROTOCOL_TLS
    public static final int PROTOCOL_EMAIL
    public static final int PROTOCOL_DNSSEC
    public static final int PROTOCOL_IPSEC
    public static final int PROTOCOL_ANY
    310:311:public KEYRecord(org.xbill.DNS.Name,int,long,int,int,int,byte[])
    326:329:public KEYRecord(org.xbill.DNS.Name,int,long,int,int,int,java.security.PublicKey)
    333:350:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    17:17:public bridge synthetic java.security.PublicKey getPublicKey()
    17:17:public bridge synthetic byte[] getKey()
    17:17:public bridge synthetic int getAlgorithm()
    17:17:public bridge synthetic int getProtocol()
    17:17:public bridge synthetic int getFlags()
org.xbill.DNS.KEYRecord$Flags
org.xbill.DNS.KEYRecord$Protocol
org.xbill.DNS.KXRecord:
    private static final long serialVersionUID
    30:32:public KXRecord(org.xbill.DNS.Name,int,long,int,org.xbill.DNS.Name)
    37:37:public org.xbill.DNS.Name getTarget()
    43:43:public int getPreference()
org.xbill.DNS.LOCRecord:
    private static final long serialVersionUID
    51:58:public LOCRecord(org.xbill.DNS.Name,int,long,double,double,double,double,double,double)
    79:90:private double parseFixedPoint(java.lang.String)
    95:131:private long parsePosition(org.xbill.DNS.Tokenizer,java.lang.String)
    139:156:private long parseDouble(org.xbill.DNS.Tokenizer,java.lang.String,boolean,long,long,long)
    162:171:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    249:249:public double getLatitude()
    255:255:public double getLongitude()
    261:261:public double getAltitude()
    267:267:public double getSize()
    273:273:public double getHPrecision()
    279:279:public double getVPrecision()
org.xbill.DNS.Lookup:
    public static final int SUCCESSFUL
    public static final int UNRECOVERABLE
    public static final int TRY_AGAIN
    public static final int HOST_NOT_FOUND
    public static final int TYPE_NOT_FOUND
    113:114:public static synchronized void setDefaultResolver(org.xbill.DNS.Resolver)
    141:143:public static synchronized void setDefaultCache(org.xbill.DNS.Cache,int)
    160:161:public static synchronized void setDefaultSearchPath(org.xbill.DNS.Name[])
    170:178:public static synchronized void setDefaultSearchPath(java.lang.String[])
    246:247:public Lookup(org.xbill.DNS.Name,int)
    257:258:public Lookup(org.xbill.DNS.Name)
    272:273:public Lookup(java.lang.String,int,int)
    298:299:public Lookup(java.lang.String)
    308:309:public void setResolver(org.xbill.DNS.Resolver)
    318:319:public void setSearchPath(org.xbill.DNS.Name[])
    329:337:public void setSearchPath(java.lang.String[])
    347:354:public void setCache(org.xbill.DNS.Cache)
    363:364:public void setCredibility(int)
    561:567:private void checkDone()
    577:578:public org.xbill.DNS.Record[] getAnswers()
    590:593:public org.xbill.DNS.Name[] getAliases()
    604:605:public int getResult()
    616:626:public java.lang.String getErrorString()
org.xbill.DNS.MBRecord:
    private static final long serialVersionUID
    28:29:public MBRecord(org.xbill.DNS.Name,int,long,org.xbill.DNS.Name)
    34:34:public org.xbill.DNS.Name getMailbox()
org.xbill.DNS.MDRecord:
    private static final long serialVersionUID
    29:30:public MDRecord(org.xbill.DNS.Name,int,long,org.xbill.DNS.Name)
    35:35:public org.xbill.DNS.Name getMailAgent()
org.xbill.DNS.MFRecord:
    private static final long serialVersionUID
    29:30:public MFRecord(org.xbill.DNS.Name,int,long,org.xbill.DNS.Name)
    35:35:public org.xbill.DNS.Name getMailAgent()
org.xbill.DNS.MGRecord:
    private static final long serialVersionUID
    29:30:public MGRecord(org.xbill.DNS.Name,int,long,org.xbill.DNS.Name)
    35:35:public org.xbill.DNS.Name getMailbox()
org.xbill.DNS.MINFORecord:
    private static final long serialVersionUID
    40:45:public MINFORecord(org.xbill.DNS.Name,int,long,org.xbill.DNS.Name,org.xbill.DNS.Name)
    55:57:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    72:72:public org.xbill.DNS.Name getResponsibleAddress()
    81:81:public org.xbill.DNS.Name getErrorAddress()
org.xbill.DNS.MRRecord:
    private static final long serialVersionUID
    29:30:public MRRecord(org.xbill.DNS.Name,int,long,org.xbill.DNS.Name)
    35:35:public org.xbill.DNS.Name getNewName()
org.xbill.DNS.MXRecord:
    private static final long serialVersionUID
    30:32:public MXRecord(org.xbill.DNS.Name,int,long,int,org.xbill.DNS.Name)
    37:37:public org.xbill.DNS.Name getTarget()
    43:43:public int getPriority()
org.xbill.DNS.Master
org.xbill.DNS.Message:
    public static final int MAXLENGTH
    static final int TSIG_UNSIGNED
    static final int TSIG_VERIFIED
    static final int TSIG_INTERMEDIATE
    static final int TSIG_SIGNED
    static final int TSIG_FAILED
    95:95:public static org.xbill.DNS.Message newUpdate(org.xbill.DNS.Name)
    140:141:public void setHeader(org.xbill.DNS.Header)
    172:177:public boolean removeRecord(org.xbill.DNS.Record,int)
    187:189:public void removeAllRecords(int)
    198:198:public boolean findRecord(org.xbill.DNS.Record,int)
    208:211:public boolean findRecord(org.xbill.DNS.Record)
    222:229:public boolean findRRset(org.xbill.DNS.Name,int,int)
    240:240:public boolean findRRset(org.xbill.DNS.Name,int)
    518:521:public void setTSIG(org.xbill.DNS.TSIG,int,org.xbill.DNS.TSIGRecord)
org.xbill.DNS.Mnemonic:
    static final int CASE_SENSITIVE
    static final int CASE_UPPER
    static final int CASE_LOWER
    114:120:private int parseNumeric(java.lang.String)
    191:207:public int getValue(java.lang.String)
org.xbill.DNS.NAPTRRecord:
    private static final long serialVersionUID
    46:58:public NAPTRRecord(org.xbill.DNS.Name,int,long,int,int,java.lang.String,java.lang.String,java.lang.String,org.xbill.DNS.Name)
    72:83:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    106:106:public int getOrder()
    112:112:public int getPreference()
    118:118:public java.lang.String getFlags()
    124:124:public java.lang.String getService()
    130:130:public java.lang.String getRegexp()
    136:136:public org.xbill.DNS.Name getReplacement()
org.xbill.DNS.NSAPRecord:
    private static final long serialVersionUID
    29:57:private static final byte[] checkAndConvertAddress(java.lang.String)
    67:73:public NSAPRecord(org.xbill.DNS.Name,int,long,java.lang.String)
    82:86:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    93:93:public java.lang.String getAddress()
org.xbill.DNS.NSAP_PTRRecord:
    private static final long serialVersionUID
    29:30:public NSAP_PTRRecord(org.xbill.DNS.Name,int,long,org.xbill.DNS.Name)
    35:35:public org.xbill.DNS.Name getTarget()
org.xbill.DNS.NSEC3PARAMRecord:
    private static final long serialVersionUID
    50:64:public NSEC3PARAMRecord(org.xbill.DNS.Name,int,long,int,int,int,byte[])
    95:108:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    131:131:public int getHashAlgorithm()
    137:137:public int getFlags()
    143:143:public int getIterations()
    150:150:public byte[] getSalt()
    162:162:public byte[] hashName(org.xbill.DNS.Name)
org.xbill.DNS.NSEC3Record:
    public static final int SHA1_DIGEST_ID
    private static final long serialVersionUID
    81:101:public NSEC3Record(org.xbill.DNS.Name,int,long,int,int,int,byte[],byte[],int[])
    139:155:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    185:185:public int getHashAlgorithm()
    191:191:public int getFlags()
    197:197:public int getIterations()
    204:204:public byte[] getSalt()
    210:210:public byte[] getNext()
    216:216:public int[] getTypes()
    223:223:public boolean hasType(int)
    231:251:static byte[] hashName(org.xbill.DNS.Name,int,int,byte[])
    263:263:public byte[] hashName(org.xbill.DNS.Name)
org.xbill.DNS.NSEC3Record$Digest
org.xbill.DNS.NSEC3Record$Flags
org.xbill.DNS.NSECRecord:
    private static final long serialVersionUID
    40:46:public NSECRecord(org.xbill.DNS.Name,int,long,org.xbill.DNS.Name,int[])
    63:65:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    83:83:public org.xbill.DNS.Name getNext()
    89:89:public int[] getTypes()
    95:95:public boolean hasType(int)
org.xbill.DNS.NSRecord:
    private static final long serialVersionUID
    28:29:public NSRecord(org.xbill.DNS.Name,int,long,org.xbill.DNS.Name)
    34:34:public org.xbill.DNS.Name getTarget()
org.xbill.DNS.NULLRecord:
    private static final long serialVersionUID
    33:39:public NULLRecord(org.xbill.DNS.Name,int,long,byte[])
    48:48:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    59:59:public byte[] getData()
org.xbill.DNS.NXTRecord:
    private static final long serialVersionUID
    38:41:public NXTRecord(org.xbill.DNS.Name,int,long,org.xbill.DNS.Name,java.util.BitSet)
    58:70:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    89:89:public org.xbill.DNS.Name getNext()
    95:95:public java.util.BitSet getBitmap()
org.xbill.DNS.Name:
    private static final long serialVersionUID
    private static final int LABEL_NORMAL
    private static final int LABEL_COMPRESSION
    private static final int LABEL_MASK
    private static final int MAXNAME
    private static final int MAXLABEL
    private static final int MAXLABELS
    private static final int MAXOFFSETS
    287:288:public Name(java.lang.String)
    398:399:public Name(byte[])
    443:452:public org.xbill.DNS.Name relativize(org.xbill.DNS.Name)
    461:471:public org.xbill.DNS.Name wild(int)
    517:519:public boolean isWild()
    620:624:public byte[] getLabel(int)
    634:635:public java.lang.String getLabelString(int)
    680:682:public byte[] toWire()
org.xbill.DNS.NameTooLongException:
    21:22:public NameTooLongException(java.lang.String)
org.xbill.DNS.OPTRecord:
    private static final long serialVersionUID
    72:81:public OPTRecord(int,int,int,int,java.util.List)
    97:98:public OPTRecord(int,int,int,int)
    106:107:public OPTRecord(int,int,int)
    123:123:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    190:192:public java.util.List getOptions()
    201:214:public java.util.List getOptions(int)
org.xbill.DNS.Opcode:
    public static final int QUERY
    public static final int IQUERY
    public static final int STATUS
    public static final int NOTIFY
    public static final int UPDATE
    46:46:private Opcode()
    57:57:public static int value(java.lang.String)
org.xbill.DNS.Options:
    38:38:private Options()
    62:63:public static void clear()
    84:87:public static void unset(java.lang.String)
org.xbill.DNS.PTRRecord:
    private static final long serialVersionUID
    29:30:public PTRRecord(org.xbill.DNS.Name,int,long,org.xbill.DNS.Name)
    35:35:public org.xbill.DNS.Name getTarget()
org.xbill.DNS.PXRecord:
    private static final long serialVersionUID
    38:43:public PXRecord(org.xbill.DNS.Name,int,long,int,org.xbill.DNS.Name,org.xbill.DNS.Name)
    54:57:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    81:81:public int getPreference()
    87:87:public org.xbill.DNS.Name getMap822()
    93:93:public org.xbill.DNS.Name getMapX400()
org.xbill.DNS.RPRecord:
    private static final long serialVersionUID
    36:40:public RPRecord(org.xbill.DNS.Name,int,long,org.xbill.DNS.Name,org.xbill.DNS.Name)
    50:52:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    67:67:public org.xbill.DNS.Name getMailbox()
    73:73:public org.xbill.DNS.Name getTextDomain()
org.xbill.DNS.RRSIGRecord:
    private static final long serialVersionUID
    46:48:public RRSIGRecord(org.xbill.DNS.Name,int,long,int,int,long,java.util.Date,java.util.Date,int,org.xbill.DNS.Name,byte[])
    18:18:public bridge synthetic byte[] getSignature()
    18:18:public bridge synthetic org.xbill.DNS.Name getSigner()
    18:18:public bridge synthetic int getFootprint()
    18:18:public bridge synthetic java.util.Date getTimeSigned()
    18:18:public bridge synthetic java.util.Date getExpire()
    18:18:public bridge synthetic long getOrigTTL()
    18:18:public bridge synthetic int getLabels()
    18:18:public bridge synthetic int getAlgorithm()
org.xbill.DNS.RRset:
    private static final long serialVersionUID
    100:102:public synchronized void deleteRR(org.xbill.DNS.Record)
    107:110:public synchronized void clear()
    156:156:public synchronized java.util.Iterator rrs(boolean)
    171:171:public synchronized java.util.Iterator sigs()
    177:177:public synchronized int size()
org.xbill.DNS.RTRecord:
    private static final long serialVersionUID
    32:34:public RTRecord(org.xbill.DNS.Name,int,long,int,org.xbill.DNS.Name)
    39:39:public int getPreference()
    45:45:public org.xbill.DNS.Name getIntermediateHost()
org.xbill.DNS.Rcode:
    public static final int NOERROR
    public static final int FORMERR
    public static final int SERVFAIL
    public static final int NXDOMAIN
    public static final int NOTIMP
    public static final int NOTIMPL
    public static final int REFUSED
    public static final int YXDOMAIN
    public static final int YXRRSET
    public static final int NXRRSET
    public static final int NOTAUTH
    public static final int NOTZONE
    public static final int BADVERS
    public static final int BADSIG
    public static final int BADKEY
    public static final int BADTIME
    public static final int BADMODE
    103:103:private Rcode()
    120:120:public static int value(java.lang.String)
org.xbill.DNS.Record:
    private static final long serialVersionUID
    109:124:public static org.xbill.DNS.Record newRecord(org.xbill.DNS.Name,int,int,long,int,byte[])
    139:139:public static org.xbill.DNS.Record newRecord(org.xbill.DNS.Name,int,int,long,byte[])
    200:200:static org.xbill.DNS.Record fromWire(org.xbill.DNS.DNSInput,int)
    208:208:public static org.xbill.DNS.Record fromWire(byte[],int)
    234:236:public byte[] toWire(int)
    276:276:public byte[] toWireCanonical()
    abstract void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    344:399:protected static byte[] byteArrayFromString(java.lang.String)
    456:482:public static org.xbill.DNS.Record fromString(org.xbill.DNS.Name,int,int,long,org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    500:500:public static org.xbill.DNS.Record fromString(org.xbill.DNS.Name,int,int,long,java.lang.String,org.xbill.DNS.Name)
    619:623:public org.xbill.DNS.Record withName(org.xbill.DNS.Name)
    632:635:org.xbill.DNS.Record withDClass(int,long)
org.xbill.DNS.RelativeNameException:
    21:22:public RelativeNameException(java.lang.String)
org.xbill.DNS.Resolver:
    public abstract void setPort(int)
    public abstract void setTCP(boolean)
    public abstract void setIgnoreTruncation(boolean)
    public abstract void setEDNS(int)
    public abstract void setEDNS(int,int,int,java.util.List)
    public abstract void setTSIGKey(org.xbill.DNS.TSIG)
org.xbill.DNS.ReverseMap
org.xbill.DNS.SIG0
org.xbill.DNS.SIGBase:
    private static final long serialVersionUID
    35:49:public SIGBase(org.xbill.DNS.Name,int,int,long,int,int,long,java.util.Date,java.util.Date,int,org.xbill.DNS.Name,byte[])
    66:81:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    126:126:public int getAlgorithm()
    136:136:public int getLabels()
    142:142:public long getOrigTTL()
    148:148:public java.util.Date getExpire()
    154:154:public java.util.Date getTimeSigned()
    160:160:public int getFootprint()
    166:166:public org.xbill.DNS.Name getSigner()
    172:172:public byte[] getSignature()
    177:178:void setSignature(byte[])
org.xbill.DNS.SIGRecord:
    private static final long serialVersionUID
    46:48:public SIGRecord(org.xbill.DNS.Name,int,long,int,int,long,java.util.Date,java.util.Date,int,org.xbill.DNS.Name,byte[])
    18:18:public bridge synthetic byte[] getSignature()
    18:18:public bridge synthetic org.xbill.DNS.Name getSigner()
    18:18:public bridge synthetic int getFootprint()
    18:18:public bridge synthetic java.util.Date getTimeSigned()
    18:18:public bridge synthetic java.util.Date getExpire()
    18:18:public bridge synthetic long getOrigTTL()
    18:18:public bridge synthetic int getLabels()
    18:18:public bridge synthetic int getAlgorithm()
org.xbill.DNS.SOARecord:
    private static final long serialVersionUID
    66:73:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    112:112:public org.xbill.DNS.Name getHost()
    118:118:public org.xbill.DNS.Name getAdmin()
    130:130:public long getRefresh()
    136:136:public long getRetry()
    142:142:public long getExpire()
org.xbill.DNS.SPFRecord:
    private static final long serialVersionUID
    31:32:public SPFRecord(org.xbill.DNS.Name,int,long,java.util.List)
    41:42:public SPFRecord(org.xbill.DNS.Name,int,long,java.lang.String)
    13:13:public bridge synthetic java.util.List getStringsAsByteArrays()
    13:13:public bridge synthetic java.util.List getStrings()
org.xbill.DNS.SRVRecord:
    private static final long serialVersionUID
    43:48:public SRVRecord(org.xbill.DNS.Name,int,long,int,int,int,org.xbill.DNS.Name)
    60:64:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
org.xbill.DNS.SSHFPRecord:
    private static final long serialVersionUID
    52:56:public SSHFPRecord(org.xbill.DNS.Name,int,long,int,int,byte[])
    67:70:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    86:86:public int getAlgorithm()
    92:92:public int getDigestType()
    98:98:public byte[] getFingerPrint()
org.xbill.DNS.SSHFPRecord$Algorithm
org.xbill.DNS.SSHFPRecord$Digest
org.xbill.DNS.Section:
    public static final int QUESTION
    public static final int ANSWER
    public static final int AUTHORITY
    public static final int ADDITIONAL
    public static final int ZONE
    public static final int PREREQ
    public static final int UPDATE
    61:61:private Section()
    89:89:public static int value(java.lang.String)
org.xbill.DNS.Serial:
    private static final long MAX32
    18:19:private Serial()
    54:58:public static long increment(long)
org.xbill.DNS.SetResponse:
    static final int UNKNOWN
    static final int NXDOMAIN
    static final int NXRRSET
    static final int DELEGATION
    static final int CNAME
    static final int DNAME
    static final int SUCCESSFUL
    115:115:public boolean isUnknown()
    184:184:public org.xbill.DNS.RRset getNS()
org.xbill.DNS.SimpleResolver:
    public static final int DEFAULT_PORT
    public static final int DEFAULT_EDNS_PAYLOADSIZE
    private static final short DEFAULT_UDPSIZE
    78:78:java.net.InetSocketAddress getAddress()
    84:85:public static void setDefaultResolver(java.lang.String)
    89:90:public void setPort(int)
    98:99:public void setAddress(java.net.InetSocketAddress)
    108:109:public void setAddress(java.net.InetAddress)
    117:118:public void setLocalAddress(java.net.InetSocketAddress)
    127:128:public void setLocalAddress(java.net.InetAddress)
    132:133:public void setTCP(boolean)
    137:138:public void setIgnoreTruncation(boolean)
    142:148:public void setEDNS(int,int,int,java.util.List)
    152:153:public void setEDNS(int)
    157:158:public void setTSIGKey(org.xbill.DNS.TSIG)
    162:162:org.xbill.DNS.TSIG getTSIGKey()
org.xbill.DNS.SingleCompressedNameBase:
    private static final long serialVersionUID
    23:24:protected SingleCompressedNameBase(org.xbill.DNS.Name,int,int,long,org.xbill.DNS.Name,java.lang.String)
org.xbill.DNS.SingleNameBase:
    private static final long serialVersionUID
    25:26:protected SingleNameBase(org.xbill.DNS.Name,int,int,long)
    32:34:protected SingleNameBase(org.xbill.DNS.Name,int,int,long,org.xbill.DNS.Name,java.lang.String)
    43:44:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
org.xbill.DNS.TCPClient:
    129:129:static byte[] sendrecv(java.net.SocketAddress,byte[],long)
org.xbill.DNS.TKEYRecord:
    private static final long serialVersionUID
    public static final int SERVERASSIGNED
    public static final int DIFFIEHELLMAN
    public static final int GSSAPI
    public static final int RESOLVERASSIGNED
    public static final int DELETE
    68:76:public TKEYRecord(org.xbill.DNS.Name,int,long,org.xbill.DNS.Name,java.util.Date,java.util.Date,int,int,byte[],byte[])
    101:101:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    155:155:public org.xbill.DNS.Name getAlgorithm()
    164:164:public java.util.Date getTimeInception()
    173:173:public java.util.Date getTimeExpire()
    179:179:public int getMode()
    185:185:public int getError()
    191:191:public byte[] getKey()
    197:197:public byte[] getOther()
org.xbill.DNS.TSIG:
    private static final java.lang.String HMAC_MD5_STR
    private static final java.lang.String HMAC_SHA1_STR
    private static final java.lang.String HMAC_SHA256_STR
    public static final short FUDGE
    46:54:private void getDigest()
    63:68:public TSIG(org.xbill.DNS.Name,org.xbill.DNS.Name,byte[])
    78:79:public TSIG(org.xbill.DNS.Name,byte[])
    89:101:public TSIG(org.xbill.DNS.Name,java.lang.String,java.lang.String)
    113:123:public TSIG(java.lang.String,java.lang.String,java.lang.String)
    135:136:public TSIG(java.lang.String,java.lang.String)
    150:157:public static org.xbill.DNS.TSIG fromString(java.lang.String)
    268:306:public void applyStream(org.xbill.DNS.Message,org.xbill.DNS.TSIGRecord,boolean)
org.xbill.DNS.TSIGRecord:
    private static final long serialVersionUID
    93:93:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    180:180:public int getOriginalID()
org.xbill.DNS.TTL:
    public static final long MAX_VALUE
    18:18:private TTL()
    38:71:public static long parse(java.lang.String,boolean)
    83:83:public static long parseTTL(java.lang.String)
org.xbill.DNS.TXTBase:
    private static final long serialVersionUID
    26:27:protected TXTBase(org.xbill.DNS.Name,int,int,long)
    31:45:protected TXTBase(org.xbill.DNS.Name,int,int,long,java.util.List)
    49:50:protected TXTBase(org.xbill.DNS.Name,int,int,long,java.lang.String)
    63:77:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    99:102:public java.util.List getStrings()
    111:111:public java.util.List getStringsAsByteArrays()
org.xbill.DNS.TXTRecord:
    private static final long serialVersionUID
    31:32:public TXTRecord(org.xbill.DNS.Name,int,long,java.util.List)
    41:42:public TXTRecord(org.xbill.DNS.Name,int,long,java.lang.String)
    13:13:public bridge synthetic java.util.List getStringsAsByteArrays()
    13:13:public bridge synthetic java.util.List getStrings()
org.xbill.DNS.Tokenizer
org.xbill.DNS.Tokenizer$1
org.xbill.DNS.Tokenizer$Token
org.xbill.DNS.Tokenizer$TokenizerException
org.xbill.DNS.Type:
    public static final int A
    public static final int NS
    public static final int MD
    public static final int MF
    public static final int CNAME
    public static final int SOA
    public static final int MB
    public static final int MG
    public static final int MR
    public static final int NULL
    public static final int WKS
    public static final int PTR
    public static final int HINFO
    public static final int MINFO
    public static final int MX
    public static final int TXT
    public static final int RP
    public static final int AFSDB
    public static final int X25
    public static final int ISDN
    public static final int RT
    public static final int NSAP
    public static final int NSAP_PTR
    public static final int SIG
    public static final int KEY
    public static final int PX
    public static final int GPOS
    public static final int AAAA
    public static final int LOC
    public static final int NXT
    public static final int EID
    public static final int NIMLOC
    public static final int SRV
    public static final int ATMA
    public static final int NAPTR
    public static final int KX
    public static final int CERT
    public static final int A6
    public static final int DNAME
    public static final int OPT
    public static final int APL
    public static final int DS
    public static final int SSHFP
    public static final int IPSECKEY
    public static final int RRSIG
    public static final int NSEC
    public static final int DNSKEY
    public static final int DHCID
    public static final int NSEC3
    public static final int NSEC3PARAM
    public static final int SPF
    public static final int TKEY
    public static final int TSIG
    public static final int IXFR
    public static final int AXFR
    public static final int MAILB
    public static final int MAILA
    public static final int ANY
    public static final int DLV
    285:286:private Type()
    317:321:public static int value(java.lang.String,boolean)
    330:330:public static int value(java.lang.String)
org.xbill.DNS.TypeBitmap:
    private static final long serialVersionUID
    27:32:public TypeBitmap(int[])
    64:76:public TypeBitmap(org.xbill.DNS.Tokenizer)
    80:84:public int[] toArray()
    143:143:public boolean contains(int)
org.xbill.DNS.U16NameBase:
    private static final long serialVersionUID
    26:27:protected U16NameBase(org.xbill.DNS.Name,int,int,long)
    33:36:protected U16NameBase(org.xbill.DNS.Name,int,int,long,int,java.lang.String,org.xbill.DNS.Name,java.lang.String)
    46:48:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    61:61:protected int getU16Field()
org.xbill.DNS.UDPClient:
    private static final int EPHEMERAL_START
    private static final int EPHEMERAL_STOP
    private static final int EPHEMERAL_RANGE
    161:161:static byte[] sendrecv(java.net.SocketAddress,byte[],int,long)
org.xbill.DNS.UNKRecord:
    private static final long serialVersionUID
    34:34:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    46:46:public byte[] getData()
org.xbill.DNS.Update
org.xbill.DNS.WKSRecord:
    private static final long serialVersionUID
    598:609:public WKSRecord(org.xbill.DNS.Name,int,long,java.net.InetAddress,int,int[])
    633:661:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    684:686:public java.net.InetAddress getAddress()
    695:695:public int getProtocol()
    703:703:public int[] getServices()
org.xbill.DNS.WKSRecord$Protocol
org.xbill.DNS.WKSRecord$Service
org.xbill.DNS.X25Record:
    private static final long serialVersionUID
    29:37:private static final byte[] checkAndConvertAddress(java.lang.String)
    47:53:public X25Record(org.xbill.DNS.Name,int,long,java.lang.String)
    62:66:void rdataFromString(org.xbill.DNS.Tokenizer,org.xbill.DNS.Name)
    73:73:public java.lang.String getAddress()
org.xbill.DNS.Zone
org.xbill.DNS.Zone$ZoneIterator
org.xbill.DNS.ZoneTransferIn:
    private static final int INITIALSOA
    private static final int FIRSTDATA
    private static final int IXFR_DELSOA
    private static final int IXFR_DEL
    private static final int IXFR_ADDSOA
    private static final int IXFR_ADD
    private static final int AXFR
    private static final int END
    148:150:public static org.xbill.DNS.ZoneTransferIn newAXFR(org.xbill.DNS.Name,java.lang.String,int,org.xbill.DNS.TSIG)
    165:165:public static org.xbill.DNS.ZoneTransferIn newAXFR(org.xbill.DNS.Name,java.lang.String,org.xbill.DNS.TSIG)
    183:183:public static org.xbill.DNS.ZoneTransferIn newIXFR(org.xbill.DNS.Name,long,boolean,java.net.SocketAddress,org.xbill.DNS.TSIG)
    204:206:public static org.xbill.DNS.ZoneTransferIn newIXFR(org.xbill.DNS.Name,long,boolean,java.lang.String,int,org.xbill.DNS.TSIG)
    225:225:public static org.xbill.DNS.ZoneTransferIn newIXFR(org.xbill.DNS.Name,long,boolean,java.lang.String,org.xbill.DNS.TSIG)
    233:233:public org.xbill.DNS.Name getName()
    241:241:public int getType()
    263:265:public void setDClass(int)
    547:547:public boolean isAXFR()
    565:565:public boolean isIXFR()
    573:573:public java.util.List getIXFR()
    582:582:public boolean isCurrent()
org.xbill.DNS.spi.DNSJavaNameService
org.xbill.DNS.tests.primary
org.xbill.DNS.tests.xfrin
org.xbill.DNS.utils.HMAC:
    private static final byte IPAD
    private static final byte OPAD
    private static final byte PADLEN
    50:54:public HMAC(java.security.MessageDigest,byte[])
org.xbill.DNS.utils.base16:
    private static final java.lang.String Base16
    19:19:private base16()
    47:70:public static byte[] fromString(java.lang.String)
org.xbill.DNS.utils.base32:
    63:75:private static int paddingToBlockLen(int)
    149:210:public byte[] fromString(java.lang.String)
org.xbill.DNS.utils.base32$Alphabet
org.xbill.DNS.utils.base64:
    private static final java.lang.String Base64
    19:19:private base64()
    96:142:public static byte[] fromString(java.lang.String)
org.xbill.DNS.utils.hexdump:
    11:11:public hexdump()
pvi.com.gdi.bgl.android.java.EnvDrawText
pvi.com.gdi.bgl.android.java.a
